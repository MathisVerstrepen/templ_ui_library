package ui

import (
    "github.com/MathisVerstrepen/templ_ui_library/models"
)

templ Button(data models.Button) {
    @buttonWrapper(data, buttonVariant(data))
}

templ decoratorWrapper(data models.Button) {
    switch data.Size {
    case "sm":
        <div class="h-4 w-4">
            @data.Decorator
        </div>
    case "md":
        <div class="h-5 w-5">
            @data.Decorator
        </div>
    case "lg":
        <div class="h-6 w-6">
            @data.Decorator
        </div>
    }
}

templ buttonWrapper(data models.Button, button templ.Component) {
    if data.HTML["href"] != "" {
        <a
            class={ getButtonClasses(data) }
            { addAttributes(data.HTML)... }
            { addAttributes(data.HTMX)... }
        >
            @button
        </a>
    } else {
        <button 
            class={ getButtonClasses(data) }
            { addAttributes(data.HTML)... }
            { addAttributes(data.HTMX)... }
        >
            @button
        </button>
    }
}

templ buttonVariant(data models.Button) {
    if data.Decorator != nil && (data.DecoratorPosition == models.DecoratorPositionBefore || data.DecoratorPosition == models.DecoratorPositionOnly) {
        @decoratorWrapper(data)
    }
    if data.DecoratorPosition != models.DecoratorPositionOnly {
        { data.Text }
    }
    if data.Decorator != nil && data.DecoratorPosition == models.DecoratorPositionAfter {
        @decoratorWrapper(data)
    }
}

func getButtonClasses(data models.Button) string {
    baseClass := "flex items-center justify-center gap-2 w-fit"

    sizeClasses := map[string]string{
        "sm": "px-3 py-1 text-sm rounded-lg",
        "md": "px-5 py-[6px] rounded-lg",
        "lg": "px-10 py-[10px] text-lg rounded-xl",
    }

    return baseClass + " " + 
        getVariantClasses(data.Variant, true) + " " + 
        sizeClasses[data.Size] + " " + 
        getColorClasses(data.Color) + " " + 
        getTextColor(data.Color, data.Variant) + " " +
        getOpacityClasses(data.Variant, data.Opacity)
}

func addAttributes(attrs models.Attributes) templ.Attributes {
    result := templ.Attributes{}
    for key, value := range attrs {
        result[key] = value
    }
    return result
}

templ ButtonExampleDecorator() {
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12Z" />
    </svg>
}